import re

# 電話番号正規化ライブラリ #

# http://www.soumu.go.jp/main_sosiki/joho_tsusin/top/tel_number/shigai_list.html より作成
# (市外局番, 市内局番最初の桁位置, 市内局番桁数)のタプル
AREA_CODE_AND_CITY_CODE_DIGIT_POSITION_NUMBER_TUPLE = (
    ("01267", 5, 1),
    ("01372", 5, 1),
    ("01374", 5, 1),
    ("01377", 5, 1),
    ("01392", 5, 1),
    ("01397", 5, 1),
    ("01398", 5, 1),
    ("01456", 5, 1),
    ("01457", 5, 1),
    ("01466", 5, 1),
    ("01547", 5, 1),
    ("01558", 5, 1),
    ("01564", 5, 1),
    ("01586", 5, 1),
    ("01587", 5, 1),
    ("01632", 5, 1),
    ("01634", 5, 1),
    ("01635", 5, 1),
    ("01648", 5, 1),
    ("01654", 5, 1),
    ("01655", 5, 1),
    ("01656", 5, 1),
    ("01658", 5, 1),
    ("04992", 5, 1),
    ("04994", 5, 1),
    ("04996", 5, 1),
    ("04998", 5, 1),
    ("05769", 5, 1),
    ("05979", 5, 1),
    ("07468", 5, 1),
    ("08387", 5, 1),
    ("08388", 5, 1),
    ("08396", 5, 1),
    ("08477", 5, 1),
    ("08512", 5, 1),
    ("08514", 5, 1),
    ("09496", 5, 1),
    ("09802", 5, 1),
    ("09912", 5, 1),
    ("09913", 5, 1),
    ("09969", 5, 1),
    ("0123", 4, 2),
    ("0124", 4, 2),
    ("0125", 4, 2),
    ("0126", 4, 2),
    ("0133", 4, 2),
    ("0134", 4, 2),
    ("0135", 4, 2),
    ("0136", 4, 2),
    ("0137", 4, 2),
    ("0138", 4, 2),
    ("0139", 4, 2),
    ("0142", 4, 2),
    ("0143", 4, 2),
    ("0144", 4, 2),
    ("0145", 4, 2),
    ("0146", 4, 2),
    ("0152", 4, 2),
    ("0153", 4, 2),
    ("0154", 4, 2),
    ("0155", 4, 2),
    ("0156", 4, 2),
    ("0157", 4, 2),
    ("0158", 4, 2),
    ("0162", 4, 2),
    ("0163", 4, 2),
    ("0164", 4, 2),
    ("0165", 4, 2),
    ("0166", 4, 2),
    ("0167", 4, 2),
    ("0172", 4, 2),
    ("0173", 4, 2),
    ("0174", 4, 2),
    ("0175", 4, 2),
    ("0176", 4, 2),
    ("0178", 4, 2),
    ("0179", 4, 2),
    ("0182", 4, 2),
    ("0183", 4, 2),
    ("0184", 4, 2),
    ("0185", 4, 2),
    ("0186", 4, 2),
    ("0187", 4, 2),
    ("0191", 4, 2),
    ("0192", 4, 2),
    ("0193", 4, 2),
    ("0194", 4, 2),
    ("0195", 4, 2),
    ("0197", 4, 2),
    ("0198", 4, 2),
    ("0220", 4, 2),
    ("0223", 4, 2),
    ("0224", 4, 2),
    ("0225", 4, 2),
    ("0226", 4, 2),
    ("0228", 4, 2),
    ("0229", 4, 2),
    ("0233", 4, 2),
    ("0234", 4, 2),
    ("0235", 4, 2),
    ("0237", 4, 2),
    ("0238", 4, 2),
    ("0240", 4, 2),
    ("0241", 4, 2),
    ("0242", 4, 2),
    ("0243", 4, 2),
    ("0244", 4, 2),
    ("0246", 4, 2),
    ("0247", 4, 2),
    ("0248", 4, 2),
    ("0250", 4, 2),
    ("0254", 4, 2),
    ("0255", 4, 2),
    ("0256", 4, 2),
    ("0257", 4, 2),
    ("0258", 4, 2),
    ("0259", 4, 2),
    ("0260", 4, 2),
    ("0261", 4, 2),
    ("0263", 4, 2),
    ("0264", 4, 2),
    ("0265", 4, 2),
    ("0266", 4, 2),
    ("0267", 4, 2),
    ("0268", 4, 2),
    ("0269", 4, 2),
    ("0270", 4, 2),
    ("0274", 4, 2),
    ("0276", 4, 2),
    ("0277", 4, 2),
    ("0278", 4, 2),
    ("0279", 4, 2),
    ("0280", 4, 2),
    ("0282", 4, 2),
    ("0283", 4, 2),
    ("0284", 4, 2),
    ("0285", 4, 2),
    ("0287", 4, 2),
    ("0288", 4, 2),
    ("0289", 4, 2),
    ("0291", 4, 2),
    ("0293", 4, 2),
    ("0294", 4, 2),
    ("0295", 4, 2),
    ("0296", 4, 2),
    ("0297", 4, 2),
    ("0299", 4, 2),
    ("0422", 4, 2),
    ("0428", 4, 2),
    ("0436", 4, 2),
    ("0438", 4, 2),
    ("0439", 4, 2),
    ("0460", 4, 2),
    ("0463", 4, 2),
    ("0465", 4, 2),
    ("0466", 4, 2),
    ("0467", 4, 2),
    ("0470", 4, 2),
    ("0475", 4, 2),
    ("0476", 4, 2),
    ("0478", 4, 2),
    ("0479", 4, 2),
    ("0480", 4, 2),
    ("0493", 4, 2),
    ("0494", 4, 2),
    ("0495", 4, 2),
    ("0531", 4, 2),
    ("0532", 4, 2),
    ("0533", 4, 2),
    ("0536", 4, 2),
    ("0537", 4, 2),
    ("0538", 4, 2),
    ("0539", 4, 2),
    ("0544", 4, 2),
    ("0545", 4, 2),
    ("0547", 4, 2),
    ("0548", 4, 2),
    ("0550", 4, 2),
    ("0551", 4, 2),
    ("0553", 4, 2),
    ("0554", 4, 2),
    ("0555", 4, 2),
    ("0556", 4, 2),
    ("0557", 4, 2),
    ("0558", 4, 2),
    ("0561", 4, 2),
    ("0562", 4, 2),
    ("0563", 4, 2),
    ("0564", 4, 2),
    ("0565", 4, 2),
    ("0566", 4, 2),
    ("0567", 4, 2),
    ("0568", 4, 2),
    ("0569", 4, 2),
    ("0572", 4, 2),
    ("0573", 4, 2),
    ("0574", 4, 2),
    ("0575", 4, 2),
    ("0576", 4, 2),
    ("0577", 4, 2),
    ("0578", 4, 2),
    ("0581", 4, 2),
    ("0584", 4, 2),
    ("0585", 4, 2),
    ("0586", 4, 2),
    ("0587", 4, 2),
    ("0594", 4, 2),
    ("0595", 4, 2),
    ("0596", 4, 2),
    ("0597", 4, 2),
    ("0598", 4, 2),
    ("0599", 4, 2),
    ("0721", 4, 2),
    ("0725", 4, 2),
    ("0735", 4, 2),
    ("0736", 4, 2),
    ("0737", 4, 2),
    ("0738", 4, 2),
    ("0739", 4, 2),
    ("0740", 4, 2),
    ("0742", 4, 2),
    ("0743", 4, 2),
    ("0744", 4, 2),
    ("0745", 4, 2),
    ("0746", 4, 2),
    ("0747", 4, 2),
    ("0748", 4, 2),
    ("0749", 4, 2),
    ("0761", 4, 2),
    ("0763", 4, 2),
    ("0765", 4, 2),
    ("0766", 4, 2),
    ("0767", 4, 2),
    ("0768", 4, 2),
    ("0770", 4, 2),
    ("0771", 4, 2),
    ("0772", 4, 2),
    ("0773", 4, 2),
    ("0774", 4, 2),
    ("0776", 4, 2),
    ("0778", 4, 2),
    ("0779", 4, 2),
    ("0790", 4, 2),
    ("0791", 4, 2),
    ("0794", 4, 2),
    ("0795", 4, 2),
    ("0796", 4, 2),
    ("0797", 4, 2),
    ("0798", 4, 2),
    ("0799", 4, 2),
    ("0820", 4, 2),
    ("0823", 4, 2),
    ("0824", 4, 2),
    ("0826", 4, 2),
    ("0827", 4, 2),
    ("0829", 4, 2),
    ("0833", 4, 2),
    ("0834", 4, 2),
    ("0835", 4, 2),
    ("0836", 4, 2),
    ("0837", 4, 2),
    ("0838", 4, 2),
    ("0845", 4, 2),
    ("0846", 4, 2),
    ("0847", 4, 2),
    ("0848", 4, 2),
    ("0852", 4, 2),
    ("0853", 4, 2),
    ("0854", 4, 2),
    ("0855", 4, 2),
    ("0856", 4, 2),
    ("0857", 4, 2),
    ("0858", 4, 2),
    ("0859", 4, 2),
    ("0863", 4, 2),
    ("0865", 4, 2),
    ("0866", 4, 2),
    ("0867", 4, 2),
    ("0868", 4, 2),
    ("0869", 4, 2),
    ("0875", 4, 2),
    ("0877", 4, 2),
    ("0879", 4, 2),
    ("0880", 4, 2),
    ("0883", 4, 2),
    ("0884", 4, 2),
    ("0885", 4, 2),
    ("0887", 4, 2),
    ("0889", 4, 2),
    ("0892", 4, 2),
    ("0893", 4, 2),
    ("0894", 4, 2),
    ("0895", 4, 2),
    ("0896", 4, 2),
    ("0897", 4, 2),
    ("0898", 4, 2),
    ("0920", 4, 2),
    ("0930", 4, 2),
    ("0940", 4, 2),
    ("0942", 4, 2),
    ("0943", 4, 2),
    ("0944", 4, 2),
    ("0946", 4, 2),
    ("0947", 4, 2),
    ("0948", 4, 2),
    ("0949", 4, 2),
    ("0950", 4, 2),
    ("0952", 4, 2),
    ("0954", 4, 2),
    ("0955", 4, 2),
    ("0956", 4, 2),
    ("0957", 4, 2),
    ("0959", 4, 2),
    ("0964", 4, 2),
    ("0965", 4, 2),
    ("0966", 4, 2),
    ("0967", 4, 2),
    ("0968", 4, 2),
    ("0969", 4, 2),
    ("0972", 4, 2),
    ("0973", 4, 2),
    ("0974", 4, 2),
    ("0977", 4, 2),
    ("0978", 4, 2),
    ("0979", 4, 2),
    ("0980", 4, 2),
    ("0982", 4, 2),
    ("0983", 4, 2),
    ("0984", 4, 2),
    ("0985", 4, 2),
    ("0986", 4, 2),
    ("0987", 4, 2),
    ("0993", 4, 2),
    ("0994", 4, 2),
    ("0995", 4, 2),
    ("0996", 4, 2),
    ("0997", 4, 2),
    ("011", 3, 3),
    ("015", 3, 3),
    ("017", 3, 3),
    ("018", 3, 3),
    ("019", 3, 3),
    ("022", 3, 3),
    ("023", 3, 3),
    ("024", 3, 3),
    ("025", 3, 3),
    ("026", 3, 3),
    ("027", 3, 3),
    ("028", 3, 3),
    ("029", 3, 3),
    ("042", 3, 3),
    ("043", 3, 3),
    ("044", 3, 3),
    ("045", 3, 3),
    ("046", 3, 3),
    ("047", 3, 3),
    ("048", 3, 3),
    ("049", 3, 3),
    ("052", 3, 3),
    ("053", 3, 3),
    ("054", 3, 3),
    ("055", 3, 3),
    ("058", 3, 3),
    ("059", 3, 3),
    ("072", 3, 3),
    ("073", 3, 3),
    ("075", 3, 3),
    ("076", 3, 3),
    ("077", 3, 3),
    ("078", 3, 3),
    ("079", 3, 3),
    ("082", 3, 3),
    ("083", 3, 3),
    ("084", 3, 3),
    ("086", 3, 3),
    ("087", 3, 3),
    ("088", 3, 3),
    ("089", 3, 3),
    ("092", 3, 3),
    ("093", 3, 3),
    ("095", 3, 3),
    ("096", 3, 3),
    ("097", 3, 3),
    ("098", 3, 3),
    ("099", 3, 3),
    ("03", 2, 4),
    ("04", 2, 4),
    ("06", 2, 4)
)
NOT_NUMBER_MATCH_PATTERN = re.compile("\D*", re.DOTALL | re.MULTILINE)
NUMBER_0A0_MATCH_PATTERN = re.compile("^(0[1-9]0)(\d{4})(\d{4})")
NUMBER_0AB0_MATCH_PATTERN = re.compile("^(0[1-9]{2}0)(\d{3})(\d{3})")


def normalize_tel_num(original_tel_num: str) -> str:
    tel_num = re.sub(NOT_NUMBER_MATCH_PATTERN, "", original_tel_num, 0)
    if len(tel_num) != 10 and len(tel_num) != 11:
        return tel_num

    if len(tel_num) == 11:
        # 0A0判定
        match = re.match(NUMBER_0A0_MATCH_PATTERN, tel_num)
        if match:
            # 0A0-BCDE-FGHIとして返す
            return "-".join(map(str, match.groups()))
        else:
            # 不明な番号
            return tel_num
    else:  # len(tel_num) == 10
        # 0AB0判定
        match = re.match(NUMBER_0AB0_MATCH_PATTERN, tel_num)
        if match:
            # 0AB0-CDE-FGHとして返す
            return "-".join(map(str, match.groups()))
        else:
            for num_tuple in AREA_CODE_AND_CITY_CODE_DIGIT_POSITION_NUMBER_TUPLE:
                start_num, city_code_pos, num_of_city_code = num_tuple
                # start_num(市外局番)から始まるかどうか
                if tel_num.startswith(start_num):
                    # 市外局番・市内局番・加入者番号に分割し、-で結合して返す
                    return "-".join([
                        start_num,
                        tel_num[city_code_pos:city_code_pos + num_of_city_code],
                        tel_num[city_code_pos + num_of_city_code:]
                    ])
            # いずれにも一致しなかった
            return tel_num


if __name__ == "__main__":
    pass
